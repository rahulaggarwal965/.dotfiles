#!/bin/bash

if [ -z "$1" ]; then
	rofi -modi blocks -show blocks -blocks-wrap "transmission-dmenu 1" -theme menu -theme-str  "window { width: 134mm; }"
else
	tmp_dir=$(mktemp -d -t tmp-XXXXXXXXXX)

	_cleanup() {
		local pids=$(jobs -pr)
		[ -n "$pids" ] && kill $pids
		rm -rf $tmp_dir
	}

	trap _cleanup EXIT

	_json_lines() {
		echo "$1" | sed 's/.*/"&"/' | paste -sd "," -
	}

	touch $tmp_dir/state
	_get_state(){ cat $tmp_dir/state; }
	_set_state(){ echo "$1" > $tmp_dir/state; kill -USR1 $$; }

	touch $tmp_dir/id
	_get_id(){ cat $tmp_dir/id; }
	_set_id(){ echo "$1" > $tmp_dir/id; kill -USR1 $$; }

	echo '{"event format": "{{name_enum}} {{value}}"}'

	_list() {
		local info=$(transmission-remote -l | sed -e '$d' -e 's/ \+ /\t/g' | awk -F '\t' '{printf("%s^%s^%s^%s^%s^%s\n", $2,$10,$9,$3,$7,$5)}' | column -c 60 -s '^' -T 2 -t)
		local torrents=$(sed '1d' <<< "$info")
		if [ -z "$torrents" ]; then
		    local header=""
			local lines='" Add Torrent"'
		else
            local header=$(sed -n '1p' <<< "$info")
			local lines=$(_json_lines "$torrents"$'\n'" Add Torrent")
		fi
		local text=$(cat <<EOF | tr -d "\n" | tr -d "\t"
{
	"prompt": "Torrent:",
	"message": "$header",
	"lines":[$lines]}
EOF
		)
		printf '%s\n' "$text"
	}

	_edit() {
		local info=$(transmission-remote -t "$1" -l | sed -e '$d' -e 's/ \+ /\t/g' | awk -F '\t' '{printf("%s^%s^%s^%s^%s^%s\n", $2,$10,$9,$3,$7,$5)}' | column -c 60 -s '^' -T 2 -t)
		local curr=$(sed '1d' <<< "$info")
		local name="$(awk '{print $2}' <<< "$curr")"
		local toggle="Pause Torrent" && [ "$(awk '{print $3}' <<< "$curr")" = "Stopped" ] && local toggle="Resume Torrent"
		local message=$(sed -e 's/&/&amp;/g' -e '$!s/.*/&\\n/'  <<< "$info")
		local text=$(cat <<EOF | tr -d "\n" | tr -d "\t"
{
	"prompt": "$name:",
	"message": "${message}",
	"lines":[
	"$toggle",
	"Remove Torrent",
	"Remove Torrent and Delete Data",
	" Back"
	]}
EOF
		)
		printf '%s\n' "$text"
	}

	_add() {
		local clipboard=$(xclip -o | sed -e 's/\\/\\\\/g' -e 's/\"/\\"/g')
		local text=$(cat <<EOF | tr -d "\n" | tr -d "\t"
{
	"prompt": "Magnet Link:",
	"message": "",
	"lines":[
	"$clipboard",
	" Back"
	]}
EOF
		)
		printf '%s\n' "$text"
	}

	_tick() {
		local state=$(_get_state)
		case "$state" in
			0) _list ;;
			1) _edit $(_get_id) ;;
			2) _add ;;
		esac
	}

	while true; do
		state=$(_get_state)
		[ "$state" != 2 ] && kill -USR1 $$
		sleep 1
	done &

	trap _tick USR1

	_set_state 0

	while read -r line; do
		state=$(_get_state)
		if [ "$state" = 0 ]; then
			case "$line" in
				"SELECT_ENTRY  Add Torrent") _set_state 2 ;;
				SELECT_ENTRY*)
					_set_id $(awk '{print $2}' <<< "$line")
					_set_state 1 ;;
			esac
		elif [ "$state" = 1 ]; then
			id=$(_get_id)
			case "$line" in
				"SELECT_ENTRY  Back") _set_state 0 ;;
				"SELECT_ENTRY Resume Torrent") transmission-remote -t "$id" -s >/dev/null 2>&1 ;;
				"SELECT_ENTRY Pause Torrent")  transmission-remote -t "$id" -S >/dev/null 2>&1 ;;
				"SELECT_ENTRY Remove Torrent") transmission-remote -t "$id" -r >/dev/null 2>&1; _set_state 0 ;;
				"SELECT_ENTRY Remove Torrent and Delete Data") transmission-remote -t "$id" -rad >/dev/null 2>&1; _set_state 0 ;;
			esac
		elif [ "$state" = 2 ]; then
			case "$line" in
				"SELECT_ENTRY  Back") _set_state 0 ;;
				"SELECT_ENTRY "magnet* | "EXEC_CUSTOM_INPUT "magnet*)
					transmission-remote -a $(awk '{print $2}' <<< "$line") >/dev/null && \
					message='<span foreground=\"green\" weight=\"bold\">Success:</span> Torrent added' || message='<span foreground=\"red\" weight=\"bold\">Error:</span> invalid or corrupt torrent file'
					stdbuf -oL cat <<EOF
{"message": "${message}"}
EOF
				;;
				*) stdbuf -oL echo '{"message": "<span foreground=\"red\" weight=\"bold\">Error:</span> not a valid magnet link"}' ;;
			esac
		fi
		stdbuf -oL echo '{"input": ""}'
	done
fi
